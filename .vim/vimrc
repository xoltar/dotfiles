
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs 
	\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes
"
" " Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" Plug 'junegunn/vim-easy-align'
"
" " Any valid git URL is allowed
" Plug 'https://github.com/junegunn/vim-github-dashboard.git'
"
" " Multiple Plug commands can be written in a single line using | separators
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
"
" " On-demand loading
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeFocus' }
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'idris-hackers/idris-vim'
Plug 'liuchengxu/vim-which-key'
Plug 'vim-airline/vim-airline'
Plug 'altercation/vim-colors-solarized'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:deoplete#enable_at_startup = 1
"
"Plug 'Shougo/vimproc.vim', { 'do': 'make' }

" Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
"
" " Using a non-master branch
" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
"
" " Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
" Plug 'fatih/vim-go', { 'tag': '*' }
"
" " Plugin options
" Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
"
" " Plugin outside ~/.vim/plugged with post-update hook
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"
" " Unmanaged plugin (manually installed and updated)
" Plug '~/my-prototype-plugin'
"
" " Initialize plugin system
call plug#end()

filetype plugin indent on

let g:mapleader = "\<Space>"
let g:maplocalleader = ','
nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey  ','<CR>

set colorcolumn=80

"no idea what there are but they make 'vapRETgq' select 
"the current paragraph and reformat it
set formatoptions=1crql 

"for minibufexplorer
"let g:miniBufExplMapWindowNavVim = 1
"let g:miniBufExplMapWindowNavArrows = 1
"let g:miniBufExplMapCTabSwitchBufs = 1
"let g:miniBufExplModSelTarget = 1
autocmd Filetype tex setl updatetime=1000
"let g:livepreview_previewer = 'open -a Preview'

let g:neocomplcache_enable_at_startup = 1
" Set no max file limit
let g:ctrlp_max_files = 0
" Search from current directory instead of project root
let g:ctrlp_working_path_mode = 0

" Ignore these directories
set wildignore+=*/target/**
set wildignore+=*/RPMS/**
set wildignore+=*.ibc
set smartcase

set ignorecase

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](usr|target|javascripts|dist|build|_build|_site|_cache|data|task|garbage.*|__pycache__|data|runs)$',
  \ 'file': '\v\.(pyc|zip|jar|class|exe|o|hi|so|dll|ibc|min\.js)$'
  \ }

set number
set relativenumber 

set smartcase

" configure browser for haskell_doc.vim
let g:haddock_browser = "firefox"


nnoremap <silent> <Leader>t :NERDTreeFocus<CR>

set showcmd

noremap <leader>h :wincmd h<CR>
noremap <leader>j :wincmd j<CR>
noremap <leader>k :wincmd k<CR>
noremap <leader>l :wincmd l<CR>
noremap <leader>b :buffers<cr>
noremap <leader>ct :!ctags -R .<cr>
noremap <leader>m :make<cr>
noremap <leader><tab> :tabnext<cr>
noremap <leader><S-tab> :tabprevious<cr>
"scroll by rows, not lines
nnoremap j gj
nnoremap k gk

nnoremap f12 :cnext
nnoremap <S-f12> :cprev


nnoremap <leader>n :setlocal number!<CR>:setlocal relativenumber!<CR>

"This stuff comes from http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity"

" * I search things usual way using /something
" * I hit cs, replace first match, and hit <Esc>
" * I hit n.n.n.n.n. reviewing and replacing all matches

vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

"leader-y and leader-p copy and paste to system clipboard"
vnoremap <Leader>y "+y
vnoremap <Leader>d "+d
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
vnoremap <Leader>p "+p
vnoremap <Leader>P "+P

"leader-o opens with ctrlp"
noremap <Leader>o :tabnew<cr>:CtrlP<cr>  

" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()


"Abbreviations
:iabbrev adn and
:iabbrev tihs this
:iabbrev teh the
:iabbrev hif Hi Folks

"Because Spacemacs
noremap <leader>fe :e<cr>
noremap <leader>ff :CtrlPMixed<cr>
noremap <leader>fs :write<cr>
noremap <leader>qq :q<cr>
noremap <leader>bb :CtrlPBuffer<cr>
noremap <leader>wd :hide<cr>
noremap <leader>w- :split<cr>
noremap <leader>w/ :vsplit<cr>
noremap <leader>fed ~/.vim/vimrc<cr>
noremap <leader>feR :source ~/.vim/vimrc<cr>

noremap H ^
noremap L $

inoremap fd <esc>
"inoremap <esc> <nop>


" Vimscript file settings ---------------------- {{{
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

" html file settings ---------------------- {{{
augroup filetype_html
  autocmd!
  autocmd BufWritePre,BufRead *.html :normal gg=G
  autocmd BufNewFile,BufRead *.html setlocal nowrap
augroup END
" }}}

" c++ file settings ---------------------- {{{
augroup filetype_cpp
  autocmd!
  autocmd FileType cpp :iabbrev <buffer> ret return;<left>
  autocmd FileType cpp :iabbrev <buffer> return NOPENOPENOPE
  autocmd FileType cpp :iabbrev <buffer> reic reinterpret_cast<><left><left><right>
  "autocmd FileType cpp setlocal foldmethod=syntax
augroup END
" }}}

" Coquille
" augroup filetype_coq
"  autocmd!
"  autocmd FileType coq noremap <leader>n :CoqNext<cr>
"  autocmd FileType coq noremap <leader>. :CoqToCursor<cr>
"  autocmd FileType coq noremap <leader>u :CoqUndo<cr>
"  autocmd FileType coq noremap <leader>k :CoqKill<cr>

"augroup END

" status line ---------------------- {{{
"set statusline=%f\ %m\ %y\ (\ %c:%l\ /\ %L\ )
:set statusline=%f         " Path to the file
:set statusline+=\ 
:set statusline+=%m        " modification marker
:set statusline+=\ 
:set statusline+=%y        " file type
:set statusline+=%=        " Switch to the right side
:set statusline+=%c        " column
:set statusline+=:         " separator
:set statusline+=%l        " Current line
:set statusline+=/         " Separator
:set statusline+=%L        " Total lines
noremap ss :write<cr>
" }}}

"if has("gui_running")
  "colorscheme solarized
  "if has("gui_gtk2")
    "set guifont=Inconsolata\ Medium\ 14
  "elseif has("gui_photon")
    "set guifont=Courier\ New:s11
  "elseif has("gui_kde")
    "set guifont=Courier\ New/11/-1/5/50/0/0/0/1/0
  "elseif has("x11")
    "set guifont=-*-courier-medium-r-normal-*-*-180-*-*-m-*-*
  "elseif has("gui_macvim")
    "set guifont=Menlo\ Regular:h18
    "set background=dark
    "colorscheme solarized
  "else
    "set guifont=Consolas:h14:cDEFAULT
    "set guifont=FiraCode:h20
    "set background=dark
    "colorscheme solarized
  "endif
"else
  "highlight Normal ctermbg=black
  "set background=dark

"endif

set guifont=FiraCode:h18
set background=dark
colorscheme solarized

nnoremap <leader>work :cd %:p:h

nnoremap <leader>dark :set background=dark<cr>
nnoremap <leader>light :set background=light<cr>

let g:python_mode_python = 'python3'

" Special rules for python
au Filetype python setl et ts=4 sw=4


" Sample config for coc.nvim:
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


